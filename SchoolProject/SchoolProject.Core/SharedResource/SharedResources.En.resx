<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Algorithmiswrong" xml:space="preserve">
    <value>Algorithm is wrong</value>
  </data>
  <data name="BadRequest" xml:space="preserve">
    <value>Bad Request</value>
  </data>
  <data name="Created" xml:space="preserve">
    <value>Created Successfully</value>
  </data>
  <data name="Deleted" xml:space="preserve">
    <value>Deleted</value>
  </data>
  <data name="DepartmentIsNotExist" xml:space="preserve">
    <value>Department Is Not Exist</value>
  </data>
  <data name="EmailIsAlreadyExist" xml:space="preserve">
    <value>Email Is Already Exist</value>
  </data>
  <data name="EmailIsNotExist" xml:space="preserve">
    <value>Email Is Not Exist</value>
  </data>
  <data name="FaildToAddUser" xml:space="preserve">
    <value>Faild To Add User</value>
  </data>
  <data name="FaildToDeleteUser" xml:space="preserve">
    <value>Faild To Delete This User</value>
  </data>
  <data name="FaildToUpdateUser" xml:space="preserve">
    <value>Faild To Update The Data Of User</value>
  </data>
  <data name="FailedToChangePass" xml:space="preserve">
    <value>Failed To Change Password</value>
  </data>
  <data name="NoRefreshToken" xml:space="preserve">
    <value>No Refresh Token</value>
  </data>
  <data name="NotEmpty" xml:space="preserve">
    <value>Field must not be empty</value>
  </data>
  <data name="NotFound" xml:space="preserve">
    <value> Not Found</value>
  </data>
  <data name="NotNull" xml:space="preserve">
    <value>Field must not be null</value>
  </data>
  <data name="PassChangedSuccessfuly" xml:space="preserve">
    <value>Password Changed Successfuly</value>
  </data>
  <data name="PassNotMatchConfirmPass" xml:space="preserve">
    <value>Password and Confirm Password are not Matches</value>
  </data>
  <data name="ProblemWithNameOrPass" xml:space="preserve">
    <value>Error With UserName Or Password</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>This Field is Required</value>
  </data>
  <data name="RefreshTokenisExpired" xml:space="preserve">
    <value>Refresh Token is Expired</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="TokenisnotExpired" xml:space="preserve">
    <value>Token is not Expired</value>
  </data>
  <data name="UnAuthorized" xml:space="preserve">
    <value>You are not Authorized to access this resources</value>
  </data>
  <data name="UnprocessableEntity" xml:space="preserve">
    <value>There are Validation Error Or Syntax Error </value>
  </data>
  <data name="Updated" xml:space="preserve">
    <value>Updated Successfully</value>
  </data>
  <data name="UserNameIsAlreadyExist" xml:space="preserve">
    <value>UserName Is Already Exist</value>
  </data>
  <data name="UserNameIsNotExist" xml:space="preserve">
    <value>UserName Is Not Exist</value>
  </data>
  <data name="UserNotFound" xml:space="preserve">
    <value>User Is Not Found</value>
  </data>
  <data name="TokenisExpired" xml:space="preserve">
    <value>Token is Expired</value>
  </data>
  <data name="RoleNameIsNotFound" xml:space="preserve">
    <value>Role Name Is Not Found</value>
  </data>
  <data name="RoleNameIsExist" xml:space="preserve">
    <value>Role Name Is Already Exist</value>
  </data>
  <data name="FailedToAddRole" xml:space="preserve">
    <value>Failed To Add Role</value>
  </data>
  <data name="RoleAddedSuccefully" xml:space="preserve">
    <value>RoleAddedSuccefully</value>
  </data>
  <data name="RoleUpdatedSuccessfully" xml:space="preserve">
    <value>Role Updated Successfully</value>
  </data>
  <data name="RoleIsNotFound" xml:space="preserve">
    <value>Role Is Not Found</value>
  </data>
  <data name="RoleIsUsed" xml:space="preserve">
    <value>Role Is Used , You should deal with users with this role</value>
  </data>
  <data name="FailedToRemoveRoles" xml:space="preserve">
    <value>Failed To Remove Old Roles</value>
  </data>
  <data name="FailedToUpdateRoles" xml:space="preserve">
    <value>Failed To Update Roles</value>
  </data>
  <data name="FailedToAddNewRoles" xml:space="preserve">
    <value>Failed To Add New Roles</value>
  </data>
  <data name="FailedToRemoveClaims" xml:space="preserve">
    <value>Failed To Remove Claims</value>
  </data>
  <data name="FailedToUpdateClaims" xml:space="preserve">
    <value>Failed To Update Claims</value>
  </data>
  <data name="FailedToAddNewClaims" xml:space="preserve">
    <value>Failed To Add New Claims</value>
  </data>
  <data name="ClaimsUpdatedSuccessfully" xml:space="preserve">
    <value>Claims Updated Successfully</value>
  </data>
  <data name="FailedToSendEmail" xml:space="preserve">
    <value>Failed To Send Email</value>
  </data>
  <data name="EmailNotConfirmed" xml:space="preserve">
    <value>Email Not Confirmed</value>
  </data>
  <data name="TryToRegisterAgain" xml:space="preserve">
    <value>Try To Register Again</value>
  </data>
  <data name="ErrorInConfirmEmail" xml:space="preserve">
    <value>Error In Confirm The Email</value>
  </data>
  <data name="ConfirmEmailisCompleted" xml:space="preserve">
    <value>Confirm Email operation is Completed</value>
  </data>
  <data name="FailedToSendUserCode" xml:space="preserve">
    <value>Failed To Send User Code</value>
  </data>
  <data name="TryAgain" xml:space="preserve">
    <value>Error, Try Again</value>
  </data>
  <data name="InvalidCode" xml:space="preserve">
    <value>Invalid Code</value>
  </data>
  <data name="InstructorIsNotExist" xml:space="preserve">
    <value>Instructor Is Not Exist</value>
  </data>
  <data name="InstructorIsAlreadyManagerForDept" xml:space="preserve">
    <value>Instructor Is Already Manager For Department</value>
  </data>
  <data name="DepartmentNotFoundOrDeleted" xml:space="preserve">
    <value>Department Not Found Or Deleted</value>
  </data>
</root>